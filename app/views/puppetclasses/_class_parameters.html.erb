<% lookup_keys = overridable_lookup_keys(puppetclass, obj) %>
<% lookup_keys.each_with_index do |lookup_key, index| %>
  <% overridden = lookup_key.overridden?(obj) %>
  <% disabled = can_edit_params? && !overridden %>
  <%
    # Checks if lookup_value exists (if overridden)
    lookup_value = find_lookup_value(obj, lookup_key.id)
  %>
  <% error = lookup_value.try(:errors) %>
  <% value_prefix = "#{obj.class.model_name.downcase}[lookup_values_attributes][#{i}]" %>
    <tr id="puppetclass_<%= puppetclass.id %>_params[<%= lookup_key.id %>]" class="fields <%= 'overridden' if overridden %>">
      <%= content_tag(:td, puppetclass.name, :rowspan => lookup_keys.size, :class => "ellipsis") if i == 0 %>
      <td class="ellipsis param_name">
        <%= lookup_key.key %>
      </td>
      <td <%= "class=has-error" if error.present? %>>
        <div class="input-group">
          <%= key_with_diagnostic(obj, lookup_key, i, lookup_value) %>
          <span class="input-group-btn">
            <%= fullscreen_button("$(this).parent().prev()") %>
            <%= override_buttons(can_edit_params?, overridden) %>
          </span>
        </div>
        <% if error.present? %>
          <%= content_tag(:span, error.messages[:value].try(:to_sentence), :class => "help-block") %>
        <% end %>
      </td>
      <td class="ca">
        <%= check_box(value_prefix, :use_puppet_default,
                      :value    => lookup_value.try(:id),
                      :disabled => disabled,
                      :onchange => "toggleUsePuppetDefaultValue(this, 'value')",
                      :hidden   => disabled,
                      :title    => _('Use Puppet default'),
                      :checked  => lookup_value.try(:use_puppet_default)) if lookup_key.type == "PuppetclassLookupKey" %>
        <% if can_edit_params? %>
          <%= hidden_field(value_prefix, :lookup_key_id, :value => key.id, :disabled => disabled, :class => 'send_to_remove') %>
          <%= hidden_field(value_prefix, :id, :value => lookup_value.try(:id), :disabled => disabled, :class => 'send_to_remove') %>
          <%= hidden_field(value_prefix, :_destroy, :value => false, :disabled => disabled, :class => 'send_to_remove destroy') %>
        <% end %>
      </td>
    </tr>
<% end %>
